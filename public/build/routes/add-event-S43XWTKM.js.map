{
  "version": 3,
  "sources": ["empty-module:../services/upload-handler.server", "../../../app/routes/add-event.jsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/add-event.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/add-event.jsx\");\n  import.meta.hot.lastModified = \"1710343372498.8374\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { Form, json, useActionData, useNavigation } from \"@remix-run/react\";\nimport validateEvent from \"../services/event-validation\";\nimport mongoose from \"mongoose\";\nimport Button from \"../components/Button\";\nimport { useState } from \"react\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { authenticator } from \"../services/auth.server\";\nimport { uploadImage } from \"../services/upload-handler.server\";\nimport Calendar from \"../components/Calendar\";\nexport const meta = () => {\n  return [{\n    title: \"FitMeet - New meetup\"\n  }];\n};\nexport async function loader({\n  request\n}) {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/events\"\n  });\n  return json({\n    user\n  });\n}\nexport default function AddEvent({\n  entry\n}) {\n  _s();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\" || navigation.state === \"loading\";\n  const errors = actionData?.errors ?? null;\n  const [image, setImage] = useState(entry?.image ? entry?.image : null);\n  const [selectedDate, setSelectedDate] = useState();\n  const {\n    user\n  } = useLoaderData();\n  const handleDateClick = date => {\n    setSelectedDate(date);\n  };\n  function handleImageChange(event) {\n    const file = event.target.files[0];\n    if (file.size < 500000) {\n      // image file size must be below 0,5MB\n      const reader = new FileReader();\n      reader.onload = e => {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      alert(\"Image size must be less than 0.5MB.\");\n      event.target.value = \"\";\n    }\n  }\n  return <>\n      <h1 className=\"text-3xl font-bold text-black mt-10 mb-4 text-center\">\n        Create A New Meetup\n      </h1>\n      <Form method=\"post\" className=\"mt-4 flex-col items-center justify-center\" encType=\"multipart/form-data\">\n        <div id=\"upper-div\" className=\"flex justify-center mt-8\">\n          <div id=\"text-div\" className=\"w-full flex flex-col justify-center ml-10 mr-10\">\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Title\n              </label>\n              {errors?.title && <p className=\"inline text-red-500 text-sm\">{errors.title}</p>}\n            </div>\n            <input id=\"title\" type=\"text\" name=\"title\" className=\"block w-full mb-4 rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\" />\n\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Description\n              </label>\n              {errors?.description && <p className=\"inline text-red-500 text-sm\">\n                  {errors.description}\n                </p>}\n            </div>\n\n            <textarea id=\"text\" name=\"description\" className=\"block w-full rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"></textarea>\n\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Location\n              </label>\n              {errors?.title && <p className=\"inline text-red-500 text-sm\">{errors.location}</p>}\n            </div>\n            <input id=\"location\" type=\"adress\" name=\"location\" className=\"block w-full pl-2 rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\" />\n          </div>\n          <div id=\"image-div\" className=\"w-full flex justify-center mt-10\">\n            <input className=\"hidden\" id=\"file_input\" name=\"image\" type=\"file\" onChange={handleImageChange} />\n            <div className=\"flex flex-col items-center\">\n              <img id=\"image-preview\" className=\"cursor-pointer w-72 h-60 object-cover rounded-lg\" src={image ? image : \"https://placehold.co/600x400/F1F5F9/000000?text=Upload+an+image\"} alt=\"Choose\" onError={e => e.target.src = \"https://placehold.co/600x400?text=Error+loading+image\"} onClick={() => document.getElementById(\"file_input\").click()} />\n              {errors?.image && <p className=\"text-red-500 text-sm\">{errors.image}</p>}\n            </div>\n          </div>\n        </div>\n        <input name=\"creator\" type=\"hidden\" value={user._id ?? \"\"} />\n        <div className=\"mt-6 flex items-center\">\n          <Calendar className=\"ml-20 w-full\" onDateClick={handleDateClick} />\n          {errors?.date && <p className=\"text-red-500 text-sm ml-2\">{errors.date}</p>}\n\n          <input name=\"date\" type=\"hidden\" value={selectedDate ?? \"\"} />\n\n          <div className=\"ml-8 flex flex-col items-center w-full\">\n            <label className=\"block text-lg mb-2 text-gray-700 text-center\" htmlFor=\"time\">\n              Time\n            </label>\n\n            <input id=\"time\" type=\"time\" name=\"time\" className=\"p-3 border border-gray-300 rounded\" />\n            {errors?.time && <p className=\"text-red-500 text-sm\">{errors.time}</p>}\n          </div>\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button type=\"submit\" className=\"mt-6  p-3 bg-blue-500 text-white rounded cursor-pointer text-center\" disabled={isSubmitting}>\n            Create Meetup\n          </Button>\n        </div>\n      </Form>\n    </>;\n}\n_s(AddEvent, \"K9tPrIX5h7S6oD8OIhLIbYqs1Vs=\", false, function () {\n  return [useActionData, useNavigation, useLoaderData];\n});\n_c = AddEvent;\nexport async function action({\n  request\n}) {\n  //make sure user is authenticated\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/events\"\n  });\n  const formData = await request.formData();\n  const image = formData.get(\"image\");\n  const errors = validateEvent({\n    formData\n  });\n  if (errors && Object.keys(errors).length > 0) {\n    return json({\n      errors\n    });\n  }\n  let imageUrl = \"\";\n  if (formData.get(\"image\") && image.size > 0) {\n    imageUrl = await uploadImage(image);\n  }\n  const event = await new mongoose.models.Event({\n    date: formData.get(\"date\"),\n    title: formData.get(\"title\"),\n    image: imageUrl,\n    description: formData.get(\"description\"),\n    location: formData.get(\"location\"),\n    creator: formData.get(\"creator\")\n  });\n  const isSaved = await event.save();\n  if (isSaved) {\n    return redirect(\"/events\");\n  } else {\n    throw new Error(\"Failed to save event\");\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"AddEvent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
