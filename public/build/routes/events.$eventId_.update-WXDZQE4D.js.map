{
  "version": 3,
  "sources": ["../../../app/routes/events.$eventId_.update.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/events.$eventId_.update.jsx\"\n);\nimport.meta.hot.lastModified = \"1710346283402.9138\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n  Form,\n  useLoaderData,\n  useNavigation,\n  useActionData,\n} from \"@remix-run/react\";\nimport mongoose from \"mongoose\";\nimport { useState } from \"react\";\nimport { authenticator } from \"../services/auth.server\";\nimport Calendar from \"../components/Calendar\";\nimport Button from \"../components/Button\";\n\nexport function meta() {\n  return [\n    {\n      title: \"FitMeet - Update Event\",\n    },\n  ];\n}\n\nexport async function loader({ request, params }) {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: request.url,\n  });\n  const event = await mongoose.models.Event.findById(params.eventId).populate(\n    \"creator\"\n  );\n\n  if (user._id != event.creator._id) {\n    return redirect(`/events/${params.eventId}`);\n  }\n\n  return json({ event, user });\n}\n\nexport default function updateEvent({ entry }) {\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting =\n    navigation.state === \"submitting\" || navigation.state === \"loading\";\n\n  const errors = actionData?.errors ?? null;\n  const [image, setImage] = useState(entry?.image ? entry?.image : null);\n\n  const [selectedDate, setSelectedDate] = useState();\n  const { event, user } = useLoaderData();\n  const hours = new Date(event?.date).getHours();\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n  };\n\n  function handleImageChange(event) {\n    const file = event.target.files[0];\n    if (file.size < 500000) {\n      // image file size must be below 0,5MB\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      alert(\"Image size must be less than 0.5MB.\");\n      event.target.value = \"\";\n    }\n  }\n  return (\n    <>\n      <h1 className=\"text-3xl font-bold text-black mt-10 mb-4 text-center\">\n        Update Meetup\n      </h1>\n      <Form\n        method=\"post\"\n        className=\"mt-4 flex-col items-center justify-center\"\n        encType=\"multipart/form-data\"\n      >\n        <div id=\"upper-div\" className=\"flex justify-center mt-8\">\n          <div\n            id=\"text-div\"\n            className=\"w-full flex flex-col justify-center ml-10 mr-10\"\n          >\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Title\n              </label>\n              {errors?.title && (\n                <p className=\"inline text-red-500 text-sm\">{errors.title}</p>\n              )}\n            </div>\n            <input\n              id=\"title\"\n              type=\"text\"\n              name=\"title\"\n              className=\"block w-full mb-4 rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"\n              defaultValue={event?.title}\n            />\n\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Description\n              </label>\n              {errors?.description && (\n                <p className=\"inline text-red-500 text-sm\">\n                  {errors.description}\n                </p>\n              )}\n            </div>\n\n            <textarea\n              id=\"text\"\n              name=\"description\"\n              className=\"block w-full rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"\n              defaultValue={event?.description}\n            ></textarea>\n\n            <div className=\"flex-row space-x-4\">\n              <label className=\"inline text-lg mb-2 text-gray-700 text-start\">\n                Location\n              </label>\n              {errors?.title && (\n                <p className=\"inline text-red-500 text-sm\">{errors.location}</p>\n              )}\n            </div>\n            <input\n              id=\"location\"\n              type=\"adress\"\n              name=\"location\"\n              className=\"block w-full pl-2 rounded-md border-0 bg-slate-100 py-1.5 text-black shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"\n              defaultValue={event?.location}\n            />\n          </div>\n          <div id=\"image-div\" className=\"w-full flex justify-center mt-10\">\n            <input\n              className=\"hidden\"\n              id=\"file_input\"\n              name=\"image\"\n              type=\"file\"\n              onChange={handleImageChange}\n            />\n            <div className=\"flex flex-col items-center\">\n              <img\n                id=\"image-preview\"\n                className=\"cursor-pointer w-72 h-60 object-cover rounded-lg\"\n                src={\n                  image\n                    ? image\n                    : \"https://placehold.co/600x400/F1F5F9/000000?text=Upload+an+image\"\n                }\n                alt=\"Choose\"\n                onError={(e) =>\n                  (e.target.src =\n                    \"https://placehold.co/600x400?text=Error+loading+image\")\n                }\n                onClick={() => document.getElementById(\"file_input\").click()}\n              />\n              {errors?.image && (\n                <p className=\"text-red-500 text-sm\">{errors.image}</p>\n              )}\n            </div>\n          </div>\n        </div>\n        <input name=\"creator\" type=\"hidden\" value={user._id ?? \"\"} />\n        <div className=\"mt-6 flex items-center\">\n          <Calendar className=\"ml-20 w-full\" onDateClick={handleDateClick} />\n          {errors?.date && (\n            <p className=\"text-red-500 text-sm ml-2\">{errors.date}</p>\n          )}\n\n          <input name=\"date\" type=\"hidden\" value={selectedDate ?? \"\"} />\n\n          <div className=\"ml-8 flex flex-col items-center w-full\">\n            <label\n              className=\"block text-lg mb-2 text-gray-700 text-center\"\n              htmlFor=\"time\"\n            >\n              Time\n            </label>\n\n            <input\n              id=\"time\"\n              type=\"time\"\n              name=\"time\"\n              className=\"p-3 border border-gray-300 rounded\"\n              defaultValue={event?.date}\n            />\n            {errors?.time && (\n              <p className=\"text-red-500 text-sm\">{errors.time}</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button\n            type=\"submit\"\n            className=\"mt-6  p-3 bg-blue-500 text-white rounded cursor-pointer text-center\"\n            disabled={isSubmitting}\n          >\n            Create Meetup\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n}\nexport async function action({ request, params }) {\n  // Protect the route\n  const authUser = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/events\",\n  });\n\n  // Fetch the post to check if the current user is the creator\n  const postToUpdate = await mongoose.models.Post.findById(params.postId);\n\n  if (postToUpdate.user.toString() !== authUser._id.toString()) {\n    // User is not the creator of the post, redirect\n    return redirect(`/posts/${params.postId}`);\n  }\n\n  // User is authenticated and is the creator, proceed to update the post\n  const formData = await request.formData();\n  const post = Object.fromEntries(formData);\n\n  // Since postToUpdate is already the document you want to update,\n  // you can directly modify and save it, which can be more efficient than findByIdAndUpdate\n  postToUpdate.caption = post.caption;\n  postToUpdate.image = post.image;\n  await postToUpdate.save();\n\n  return redirect(`/posts/${params.postId}`);\n}\n"],
  "mappings": "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",
  "names": ["import_react", "event"]
}
