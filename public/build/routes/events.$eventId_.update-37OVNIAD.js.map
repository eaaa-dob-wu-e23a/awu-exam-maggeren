{
  "version": 3,
  "sources": ["../../../app/routes/events.$eventId_.update.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/events.$eventId_.update.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/events.$eventId_.update.jsx\");\n  import.meta.hot.lastModified = \"1708686534000\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport mongoose from \"mongoose\";\nimport { useState } from \"react\";\nimport { authenticator } from \"../services/auth.server\";\nexport function meta() {\n  return [{\n    title: \"Remix Post App - Update\"\n  }];\n}\nexport async function loader({\n  request,\n  params\n}) {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/signin\"\n  });\n  const post = await mongoose.models.Post.findById(params.postId).populate(\"user\");\n  return json({\n    post\n  });\n}\nexport default function UpdatePost() {\n  _s();\n  const {\n    post\n  } = useLoaderData();\n  const [image, setImage] = useState(post.image);\n  const navigate = useNavigate();\n  function handleCancel() {\n    navigate(-1);\n  }\n  return <div className=\"page\">\n      <h1>Update Post</h1>\n      <Form id=\"post-form\" method=\"post\">\n        <label htmlFor=\"caption\">Caption</label>\n        <input id=\"caption\" defaultValue={post.caption} name=\"caption\" type=\"text\" aria-label=\"caption\" placeholder=\"Write a caption...\" />\n        <label htmlFor=\"image\">Image URL</label>\n        <input name=\"image\" defaultValue={post.image} type=\"url\" onChange={e => setImage(e.target.value)} placeholder=\"Paste an image URL...\" />\n\n        <label htmlFor=\"image-preview\">Image Preview</label>\n        <img id=\"image-preview\" className=\"image-preview\" src={image ? image : \"https://placehold.co/600x400?text=Paste+an+image+URL\"} alt=\"Choose\" onError={e => e.target.src = \"https://placehold.co/600x400?text=Error+loading+image\"} />\n\n        <input name=\"uid\" type=\"text\" defaultValue={post.uid} hidden />\n        <div className=\"btns\">\n          <button>Save</button>\n          <button type=\"button\" className=\"btn-cancel\" onClick={handleCancel}>\n            Cancel\n          </button>\n        </div>\n      </Form>\n    </div>;\n}\n_s(UpdatePost, \"i5XywuPFPLi2vR0iao/ytoXQAmQ=\", false, function () {\n  return [useLoaderData, useNavigate];\n});\n_c = UpdatePost;\nexport async function action({\n  request,\n  params\n}) {\n  // Protect the route\n  const authUser = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/signin\"\n  });\n\n  // Fetch the post to check if the current user is the creator\n  const postToUpdate = await mongoose.models.Post.findById(params.postId);\n  if (postToUpdate.user.toString() !== authUser._id.toString()) {\n    // User is not the creator of the post, redirect\n    return redirect(`/posts/${params.postId}`);\n  }\n\n  // User is authenticated and is the creator, proceed to update the post\n  const formData = await request.formData();\n  const post = Object.fromEntries(formData);\n\n  // Since postToUpdate is already the document you want to update,\n  // you can directly modify and save it, which can be more efficient than findByIdAndUpdate\n  postToUpdate.caption = post.caption;\n  postToUpdate.image = post.image;\n  await postToUpdate.save();\n  return redirect(`/posts/${params.postId}`);\n}\nvar _c;\n$RefreshReg$(_c, \"UpdatePost\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAE/B,sBAAqB;AACrB,IAAAA,gBAAyB;AACzB,kBAA8B;AA6BxB;AArDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6CAA+C,EAAE;AAAA,EAC1F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwC;AACxC,cAAY,IAAI,eAAe;AACjC;AAQO,SAAS,OAAO;AACrB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AAae,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,KAAK,KAAK;AAC7C,QAAM,WAAW,YAAY;AAC7B,WAAS,eAAe;AACtB,aAAS,EAAE;AAAA,EACb;AACA,SAAO,mDAAC,SAAI,WAAU,QAClB;AAAA,uDAAC,QAAG,2BAAJ;AAAA;AAAA;AAAA;AAAA,WAAe;AAAA,IACf,mDAAC,QAAK,IAAG,aAAY,QAAO,QAC1B;AAAA,yDAAC,WAAM,SAAQ,WAAU,uBAAzB;AAAA;AAAA;AAAA;AAAA,aAAgC;AAAA,MAChC,mDAAC,WAAM,IAAG,WAAU,cAAc,KAAK,SAAS,MAAK,WAAU,MAAK,QAAO,cAAW,WAAU,aAAY,wBAA5G;AAAA;AAAA;AAAA;AAAA,aAAiI;AAAA,MACjI,mDAAC,WAAM,SAAQ,SAAQ,yBAAvB;AAAA;AAAA;AAAA;AAAA,aAAgC;AAAA,MAChC,mDAAC,WAAM,MAAK,SAAQ,cAAc,KAAK,OAAO,MAAK,OAAM,UAAU,OAAK,SAAS,EAAE,OAAO,KAAK,GAAG,aAAY,2BAA9G;AAAA;AAAA;AAAA;AAAA,aAAsI;AAAA,MAEtI,mDAAC,WAAM,SAAQ,iBAAgB,6BAA/B;AAAA;AAAA;AAAA;AAAA,aAA4C;AAAA,MAC5C,mDAAC,SAAI,IAAG,iBAAgB,WAAU,iBAAgB,KAAK,QAAQ,QAAQ,wDAAwD,KAAI,UAAS,SAAS,OAAK,EAAE,OAAO,MAAM,2DAAzK;AAAA;AAAA;AAAA;AAAA,aAAkO;AAAA,MAElO,mDAAC,WAAM,MAAK,OAAM,MAAK,QAAO,cAAc,KAAK,KAAK,QAAM,QAA5D;AAAA;AAAA;AAAA;AAAA,aAA6D;AAAA,MAC7D,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,YAAO,oBAAR;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,QACZ,mDAAC,YAAO,MAAK,UAAS,WAAU,cAAa,SAAS,cAAc,sBAApE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAfF;AAAA;AAAA;AAAA;AAAA,WAgBA;AAAA,OAlBG;AAAA;AAAA;AAAA;AAAA,SAmBL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,eAAe,WAAW;AACpC,CAAC;AACD,KAAK;AA4BL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
